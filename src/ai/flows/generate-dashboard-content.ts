
// src/ai/flows/generate-dashboard-content.ts
'use server';
/**
 * @fileOverview Generates comprehensive dashboard content for the RunMate app.
 *
 * - generateDashboardContent - A function that generates all necessary dashboard content.
 * - GenerateDashboardInput - The input type for the function.
 * - GenerateDashboardOutput - The return type for the function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { NewsSearchCategory } from '@/lib/types';
import { fetchGoogleRunningNewsTool } from '@/ai/tools/fetch-google-running-news-tool';
import { generateMotivationalPunTool } from '@/ai/tools/generate-motivational-pun-tool';

// Zod schema for HourlyWeatherData - Internal, not exported
const HourlyWeatherDataSchema = z.object({
  time: z.string().describe("Time of the forecast segment, e.g., '9:00 AM' or '14:00'"),
  temp: z.number().describe("Temperature for this segment."),
  feelsLike: z.number().describe("Feels like temperature for this segment."),
  description: z.string().describe("Weather description, e.g., 'Light Rain'"),
  pop: z.number().min(0).max(100).describe("Probability of precipitation (0-100%)."),
  windSpeed: z.number().describe("Wind speed in user's preferred unit."),
  windGust: z.number().optional().describe("Wind gust speed."),
  icon: z.string().describe("Weather icon code from OpenWeatherMap."),
});
export type HourlyWeatherData = z.infer<typeof HourlyWeatherDataSchema>;

// Zod schema for DailyForecastData - Internal, not exported
const DailyForecastDataSchema = z.object({
  locationName: z.string().describe("Name of the location, e.g., 'London'"),
  date: z.string().describe("Date of the forecast, e.g., 'Tuesday, July 30th'"),
  overallDescription: z.string().describe("A general summary of the day's weather, e.g., 'Cloudy with periods of rain, clearing later.'"),
  tempMin: z.number().describe("Minimum temperature for the day."),
  tempMax: z.number().describe("Maximum temperature for the day."),
  sunrise: z.string().describe("Sunrise time, e.g., '6:00 AM'"),
  sunset: z.string().describe("Sunset time, e.g., '8:30 PM'"),
  humidityAvg: z.number().describe("Average humidity for the day (percentage)."),
  windAvg: z.number().describe("Average wind speed for the day (in user's preferred unit)."),
  hourly: z.array(HourlyWeatherDataSchema).describe("Array of hourly (or 3-hourly) forecast segments for the day."),
  error: z.string().optional().describe("Error message if fetching forecast failed."),
});
export type DailyForecastData = z.infer<typeof DailyForecastDataSchema>;

const newsSearchCategoryValues: [NewsSearchCategory, ...NewsSearchCategory[]] = [
  "geographic_area", "track_road_trail", "running_tech",
  "running_apparel", "marathon_majors", "nutrition", "training"
];

// Internal schema, not exported
const GenerateDashboardInputSchemaInternal = z.object({
  userId: z.string().describe("The user's unique ID."),
  userName: z.string().describe('The name of the user.'),
  locationCity: z.string().describe('The city of the user for weather and potentially geographic news search.'),
  runningLevel: z.string().describe('The running level of the user (e.g., beginner, intermediate, advanced).'),
  goal: z.string().describe('The primary training goal of the user (e.g., 5k, Marathon).'),
  todaysWorkout: z.string().describe("The workout scheduled for the user for the current day. Could be 'Rest day' or a specific workout description."),
  detailedWeather: z.union([
    DailyForecastDataSchema,
    z.object({ error: z.string(), locationName: z.string().optional() }).describe("An object containing an error message if weather data retrieval failed.")
  ]).describe("The structured daily weather forecast for the user's location, or an error object if retrieval failed."),
  weatherUnit: z.enum(["C", "F"]).describe("The user's preferred weather unit (Celsius or Fahrenheit)."),
  newsSearchCategories: z.array(z.enum(newsSearchCategoryValues)).optional().describe("User's preferred categories for news search. Can be empty or undefined if no preferences are set."),
});
export type GenerateDashboardInput = z.infer<typeof GenerateDashboardInputSchemaInternal>;

// Internal schema, not exported
const DressMyRunItemSchemaInternal = z.object({
  item: z.string().describe("The specific clothing item recommended, e.g., 'Lightweight, moisture-wicking t-shirt' or 'Sunglasses'."),
  category: z.string().describe("The general category of the clothing item. Examples: hat, visor, sunglasses, headband, shirt, tank-top, long-sleeve, base-layer, mid-layer, jacket, vest, windbreaker, rain-jacket, shorts, capris, tights, pants, gloves, mittens, socks, shoes, gaiter, balaclava, accessory."),
});
export type DressMyRunItem = z.infer<typeof DressMyRunItemSchemaInternal>;

// Internal schema, not exported
const GenerateDashboardOutputSchemaInternal = z.object({
  greeting: z.string().describe('A friendly greeting with a running-related pun, generated by the generateMotivationalPunTool.'),
  weatherSummary: z.string().describe("A user-friendly summary of the day's local weather forecast, including a recommendation for the best time to run based on the provided hourly data. If weather data is unavailable or an error occurred, this should state so clearly and include the specific error message."),
  workoutForDisplay: z.string().describe("The workout scheduled for the user for the current day, ready for display. This is typically the same as todaysWorkout input."),
  topStories: z
    .array(
      z.object({
        title: z.string().describe('The title of the summarized article.'),
        summary: z.string().describe('A concise summary of the article snippet from the search result. If the original snippet is short, the summary might be very similar to it.'),
        url: z.string().url().describe('The URL of the article from the search tool.'),
        source: z.string().optional().describe('The source of the news article (e.g., website name).'),
      })
    )
    .max(5) // Ensure we don't exceed 5 stories
    .describe('An array of up to 5 summarized news stories from Google Search. If no news stories were found or an error occurred with the news tool, this MUST be an empty array.'),
  planEndNotification: z.string().optional().describe("A message if the user's training plan has ended (e.g., if todaysWorkout indicates plan completion)."),
  dressMyRunSuggestion: z.array(DressMyRunItemSchemaInternal).describe('A DETAILED, ITEMIZED list of clothing recommendations based on weather at the recommended run time. Each item must be an object with "item" (string) and "category" (string). If weather is unavailable, this should be an empty array.'),
});
export type GenerateDashboardOutput = z.infer<typeof GenerateDashboardOutputSchemaInternal>;


export async function generateDashboardContent(input: GenerateDashboardInput): Promise<GenerateDashboardOutput> {
  return generateDashboardContentFlow(input);
}

const dashboardPrompt = ai.definePrompt({
  name: 'generateDashboardContentPrompt',
  input: { schema: GenerateDashboardInputSchemaInternal },
  output: { schema: GenerateDashboardOutputSchemaInternal },
  tools: [
    generateMotivationalPunTool,
    fetchGoogleRunningNewsTool
  ],
  prompt: `You are an AI assistant for "Shut Up and Run", a running companion app. Your task is to generate all content for the user's daily dashboard.

User Details:
- Name: {{{userName}}}
- Location: {{{locationCity}}}
- Running Level: {{{runningLevel}}}
- Goal: {{{goal}}}
- Today's Workout: {{{todaysWorkout}}}
- Weather Unit: {{{weatherUnit}}}
- Detailed Weather Data or Error: {{{jsonEncode detailedWeather}}}
- News Search Categories: {{{jsonEncode newsSearchCategories}}}

Your response MUST be a single JSON object strictly adhering to the GenerateDashboardOutputSchema.

Follow these steps precisely:

1.  **Greeting ('greeting' field):**
    *   Use the 'generateMotivationalPunTool' to create a personalized greeting.
    *   The tool expects: { "userName": "{{{userName}}}" }
    *   The tool returns: { "greeting": "string" }
    *   Use the returned 'greeting' for this field in your JSON output.

2.  **Weather Summary & Running Recommendation ('weatherSummary' field):**
    *   The input 'detailedWeather' contains either full forecast data or an error object.
    *   **If 'detailedWeather.error' exists**:
        *   The 'weatherSummary' field MUST BE: "Weather forecast for {{{locationCity}}} is currently unavailable: {{{detailedWeather.error}}}".
        *   In this case, 'dressMyRunSuggestion' MUST be an empty array ([]).
    *   **Otherwise (if 'detailedWeather.hourly' exists and no error)**:
        *   a. **Daily Overview**: Start with "Today in {{{detailedWeather.locationName}}} ({{{detailedWeather.date}}}), expect {{{detailedWeather.overallDescription}}}."
        *   b. **Temperature & Sun**: Seamlessly continue with: "High of {{{detailedWeather.tempMax}}}{{{weatherUnit}}}, low of {{{detailedWeather.tempMin}}}{{{weatherUnit}}}. Sunrise: {{{detailedWeather.sunrise}}}, Sunset: {{{detailedWeather.sunset}}}. Avg Humidity: {{{detailedWeather.humidityAvg}}}%."
        *   c. **Best Run Time**: Analyze 'detailedWeather.hourly' (fields: 'time', 'temp', 'feelsLike', 'description', 'pop', 'windSpeed') to find the BEST time slot(s) to run. Prioritize:
            *   Lowest 'pop' (chance of precipitation).
            *   Moderate 'feelsLike' temperatures (avoid extremes).
            *   Lower 'windSpeed'.
            *   Generally, daytime hours unless conditions are significantly better at dawn/dusk.
        *   d. **Recommendation Text**: Append to the summary: " The best time for your run looks to be [recommended time, e.g., 'around 7 AM' or 'between 4 PM and 6 PM'] because [brief explanation, e.g., 'temperatures will be cooler and chance of rain is lowest.' or 'it offers a good balance of mild temperatures and lower winds.']."
        *   Combine a, b, and d into a single, coherent paragraph for 'weatherSummary'.

3.  **Workout for Display ('workoutForDisplay' field):**
    *   Use the exact string provided in '{{{todaysWorkout}}}'.

4.  **Top News Stories ('topStories' field):**
    *   Use the 'fetchGoogleRunningNewsTool'.
    *   Provide it with: { "userLocation": "{{{locationCity}}}", "searchCategories": {{{jsonEncode newsSearchCategories}}} }
    *   The tool returns: { "articles": [{ "title": "...", "link": "...", "snippet": "...", "source": "..." }, ...], "error": "optional_error_message" }
    *   **CRITICAL**: If the tool returns an 'error' OR if 'articles' is missing, empty, or null, then 'topStories' in your JSON output MUST be an empty array ([]). Do NOT invent news.
    *   If articles are available:
        *   Select up to 5 of the most relevant and diverse articles.
        *   For each, create an object with 'title', 'summary' (concise summary of the tool's 'snippet'), 'url' (from tool's 'link'), and 'source' (from tool's 'source').
        *   Ensure all URLs are valid.

5.  **Plan End Notification ('planEndNotification' field, optional):**
    *   If '{{{todaysWorkout}}}' contains phrases like "plan completed", "final workout", or "congratulations on finishing your plan", include a positive message like: "Congratulations on completing your training plan, {{{userName}}}! Time to set a new goal?"
    *   Otherwise, omit this field or set to undefined.

6.  **Dress Your Run Suggestion ('dressMyRunSuggestion' field):**
    *   This MUST be a JSON array of objects, each like: { "item": "Specific clothing item", "category": "general_category_from_list" }.
    *   The category MUST be one of: hat, visor, sunglasses, headband, shirt, tank-top, long-sleeve, base-layer, mid-layer, jacket, vest, windbreaker, rain-jacket, shorts, capris, tights, pants, gloves, mittens, socks, shoes, gaiter, balaclava, accessory.
    *   **If 'detailedWeather.error' exists**: 'dressMyRunSuggestion' MUST be an empty array ([]).
    *   **Otherwise**: Based on the weather conditions (temp, feelsLike, pop, windSpeed, description) at the 'best time to run' you identified in step 2c, provide a DETAILED, ITEMIZED list of clothing recommendations. Be specific (e.g., "Lightweight, moisture-wicking t-shirt" not just "shirt"). Consider layers if needed.

Ensure the final output is a single, valid JSON object matching the schema.
`,
});

const generateDashboardContentFlow = ai.defineFlow(
  {
    name: 'generateDashboardContentFlow',
    inputSchema: GenerateDashboardInputSchemaInternal,
    outputSchema: GenerateDashboardOutputSchemaInternal,
  },
  async (input: GenerateDashboardInput): Promise<GenerateDashboardOutput> => {
    console.log("[generateDashboardContentFlow] Input:", JSON.stringify(input, null, 2));

    // Call the prompt directly
    const { output, errors } = await dashboardPrompt(input);

    if (errors && errors.length > 0) {
        console.error("[generateDashboardContentFlow] Errors during prompt generation:", errors);
        // Potentially throw or return a structured error
    }

    if (!output) {
      console.error("[generateDashboardContentFlow] AI prompt did not produce any output for input:", JSON.stringify(input, null, 2));
      
      let fallbackGreeting = `Hello ${input.userName}, your personalized dashboard content could not be generated by the AI at this time.`;
      try {
        const greetingResult = await generateMotivationalPunTool({ userName: input.userName });
        if (greetingResult && greetingResult.greeting) {
          fallbackGreeting = greetingResult.greeting;
        }
      } catch (greetingError) {
        console.error("[generateDashboardContentFlow] Fallback greeting generation also failed:", greetingError);
      }

      let fallbackWeatherSummary: string;
      const weatherInput = input.detailedWeather;
      const weatherHasError = typeof weatherInput === 'object' && weatherInput && 'error' in weatherInput && typeof weatherInput.error === 'string' && weatherInput.error.length > 0;

      if (weatherHasError) {
        fallbackWeatherSummary = `Weather forecast for ${input.locationCity} is currently unavailable: ${weatherInput.error}`;
      } else {
        fallbackWeatherSummary = `Could not generate weather summary and running recommendation for ${input.locationCity} at this time due to an AI processing issue. Please check back later.`;
      }
      const fallbackWorkout = input.todaysWorkout || "No workout information available.";
      
      const fallbackResult: GenerateDashboardOutput = {
        greeting: fallbackGreeting,
        weatherSummary: fallbackWeatherSummary,
        workoutForDisplay: fallbackWorkout,
        topStories: [], 
        planEndNotification: undefined,
        dressMyRunSuggestion: [],
      };
      console.log("[generateDashboardContentFlow] Returning fallback due to no AI output:", fallbackResult);
      return fallbackResult;
    }

    console.log("[generateDashboardContentFlow] AI prompt produced output (raw):", JSON.stringify(output, null, 2));

    // Safeguards for AI output consistency (as in the example flow)
    if (!output.topStories || !Array.isArray(output.topStories)) {
        console.warn("[generateDashboardContentFlow] AI output for topStories was not an array or was missing. Defaulting to empty array. Received:", output.topStories);
        output.topStories = [];
    } else {
        output.topStories = output.topStories.filter(story => {
            if (typeof story !== 'object' || story === null) return false;
            const hasValidFields = 
                typeof story.title === 'string' && story.title.trim() !== '' &&
                typeof story.summary === 'string' && // Summary can be empty
                typeof story.url === 'string' &&
                (typeof story.source === 'string' || story.source === undefined); // source is optional
            
            if (!hasValidFields) {
                console.warn("[generateDashboardContentFlow] Filtering out story with missing/invalid fields:", story);
                return false;
            }
            try {
                new URL(story.url); // Validate URL
            } catch (e) {
                 console.warn(`[generateDashboardContentFlow] Filtering out story with invalid URL: "${story.url}" Title: "${story.title}"`);
                return false;
            }
            return true;
        }).slice(0, 5);
    }
    
    if (!output.dressMyRunSuggestion || !Array.isArray(output.dressMyRunSuggestion)) {
        console.warn("[generateDashboardContentFlow] AI output for dressMyRunSuggestion was not an array or missing. Defaulting to empty array. Received:", output.dressMyRunSuggestion);
        output.dressMyRunSuggestion = [];
    } else {
        output.dressMyRunSuggestion = output.dressMyRunSuggestion.filter(item =>
            typeof item === 'object' && item !== null &&
            'item' in item && typeof item.item === 'string' && item.item.trim() !== '' &&
            'category' in item && typeof item.category === 'string' && item.category.trim() !== ''
        );
    }
    
    const weatherInput = input.detailedWeather;
    const weatherHasError = typeof weatherInput === 'object' && weatherInput && 'error' in weatherInput && typeof weatherInput.error === 'string' && weatherInput.error.length > 0;
    if (weatherHasError && output.dressMyRunSuggestion.length > 0) {
        console.warn("[generateDashboardContentFlow] Weather had an error, but AI generated dressMyRunSuggestion. Overriding to empty array.");
        output.dressMyRunSuggestion = [];
    }

    // Safeguard against hallucinated news if tool failed or returned empty
    if (output.topStories.length > 0) {
        try {
            const newsToolCallParams = { userLocation: input.locationCity, searchCategories: input.newsSearchCategories };
            console.log("[generateDashboardContentFlow] Verifying news tool results for AI-generated stories. Tool call params:", newsToolCallParams);
            const newsToolResults = await fetchGoogleRunningNewsTool(newsToolCallParams);
            if (newsToolResults.error || !newsToolResults.articles || newsToolResults.articles.length === 0) {
                console.warn("[generateDashboardContentFlow] VERIFICATION FAILED: News tool actually returned no articles or an error, but AI generated topStories. Overriding topStories to empty array. Tool Result:", newsToolResults);
                output.topStories = [];
            } else {
                 console.log("[generateDashboardContentFlow] VERIFICATION PASSED: News tool returned articles, AI stories plausible. Articles from tool:", newsToolResults.articles.length);
            }
        } catch (toolError) {
            console.warn("[generateDashboardContentFlow] VERIFICATION ERROR: Error calling fetchGoogleRunningNewsTool during safeguard check. Overriding topStories to empty array.", toolError);
            output.topStories = [];
        }
    }
    
    console.log("[generateDashboardContentFlow] Returning processed output:", JSON.stringify(output, null, 2));
    return output;
  }
);
