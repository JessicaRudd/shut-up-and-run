// This file is generated by Firebase Studio.
'use server';

/**
 * @fileOverview A flow that suggests workouts to the user when they have completed their training plan and haven't selected a new one.
 *
 * - suggestWorkoutWhenNoPlan - A function that suggests a workout.
 * - SuggestWorkoutWhenNoPlanInput - The input type for the suggestWorkoutWhenNoPlan function.
 * - SuggestWorkoutWhenNoPlanOutput - The return type for the suggestWorkoutWhenNoPlan function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestWorkoutWhenNoPlanInputSchema = z.object({
  fitnessLevel: z
    .string()
    .describe("The user's fitness level (e.g., beginner, intermediate, advanced)."),
  workoutPreferences: z
    .string()
    .describe("The user's workout preferences (e.g., running, swimming, cycling)."),
  availableTime: z
    .string()
    .describe('The amount of time the user has available for a workout (e.g., 30 minutes, 1 hour).'),
  equipmentAvailable: z
    .string()
    .describe('The equipment the user has available (e.g., treadmill, weights, none).'),
});
export type SuggestWorkoutWhenNoPlanInput = z.infer<
  typeof SuggestWorkoutWhenNoPlanInputSchema
>;

const SuggestWorkoutWhenNoPlanOutputSchema = z.object({
  workoutSuggestion: z.string().describe('A suggested workout for the user.'),
});
export type SuggestWorkoutWhenNoPlanOutput = z.infer<
  typeof SuggestWorkoutWhenNoPlanOutputSchema
>;

export async function suggestWorkoutWhenNoPlan(
  input: SuggestWorkoutWhenNoPlanInput
): Promise<SuggestWorkoutWhenNoPlanOutput> {
  return suggestWorkoutWhenNoPlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestWorkoutWhenNoPlanPrompt',
  input: {schema: SuggestWorkoutWhenNoPlanInputSchema},
  output: {schema: SuggestWorkoutWhenNoPlanOutputSchema},
  prompt: `You are a personal trainer. A user has completed their training plan and has not selected a new plan.
Suggest a workout for the user based on the following information:

Fitness level: {{{fitnessLevel}}}
Workout preferences: {{{workoutPreferences}}}
Available time: {{{availableTime}}}
Equipment available: {{{equipmentAvailable}}}

Workout suggestion:`,
});

const suggestWorkoutWhenNoPlanFlow = ai.defineFlow(
  {
    name: 'suggestWorkoutWhenNoPlanFlow',
    inputSchema: SuggestWorkoutWhenNoPlanInputSchema,
    outputSchema: SuggestWorkoutWhenNoPlanOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
