
// This file is generated by Firebase Studio.
'use server';

/**
 * @fileOverview A flow that suggests workouts to the user when they have completed their training plan and haven't selected a new one.
 *
 * - suggestWorkoutWhenNoPlan - A function that suggests a workout.
 * - SuggestWorkoutWhenNoPlanInput - The input type for the suggestWorkoutWhenNoPlan function.
 * - SuggestWorkoutWhenNoPlanOutput - The return type for the suggestWorkoutWhenNoPlan function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestWorkoutWhenNoPlanInputSchema = z.object({
  fitnessLevel: z
    .string()
    .describe("The user's fitness level (e.g., beginner, intermediate, advanced)."),
  workoutPreferences: z
    .string()
    .describe("The user's workout preferences (e.g., running, swimming, cycling)."),
  availableTime: z
    .string()
    .describe('The amount of time the user has available for a workout (e.g., 30 minutes, 1 hour).'),
  equipmentAvailable: z
    .string()
    .describe('The equipment the user has available (e.g., treadmill, weights, none).'),
});
export type SuggestWorkoutWhenNoPlanInput = z.infer<
  typeof SuggestWorkoutWhenNoPlanInputSchema
>;

const SuggestWorkoutWhenNoPlanOutputSchema = z.object({
  workoutSuggestion: z.string().describe('A suggested workout for the user.'),
});
export type SuggestWorkoutWhenNoPlanOutput = z.infer<
  typeof SuggestWorkoutWhenNoPlanOutputSchema
>;

export async function suggestWorkoutWhenNoPlan(
  input: SuggestWorkoutWhenNoPlanInput
): Promise<SuggestWorkoutWhenNoPlanOutput> {
  return suggestWorkoutWhenNoPlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestWorkoutWhenNoPlanPrompt',
  input: {schema: SuggestWorkoutWhenNoPlanInputSchema},
  output: {schema: SuggestWorkoutWhenNoPlanOutputSchema},
  prompt: `You are a personal trainer. A user has completed their training plan and has not selected a new plan.
Suggest a workout for the user based on the following information:

Fitness level: {{{fitnessLevel}}}
Workout preferences: {{{workoutPreferences}}}
Available time: {{{availableTime}}}
Equipment available: {{{equipmentAvailable}}}

Workout suggestion:`,
});

const MAX_RETRIES = 3;
const RETRY_DELAY_MS = 1000;

const suggestWorkoutWhenNoPlanFlow = ai.defineFlow(
  {
    name: 'suggestWorkoutWhenNoPlanFlow',
    inputSchema: SuggestWorkoutWhenNoPlanInputSchema,
    outputSchema: SuggestWorkoutWhenNoPlanOutputSchema,
  },
  async (input: SuggestWorkoutWhenNoPlanInput): Promise<SuggestWorkoutWhenNoPlanOutput> => {
    let retries = 0;
    while (retries < MAX_RETRIES) {
      try {
        const {output} = await prompt(input);
        if (output) {
          return output;
        }
        // If output is null or undefined for some reason, treat as an error to retry
        throw new Error("AI prompt returned no output.");
      } catch (error) {
        retries++;
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.warn(`[suggestWorkoutWhenNoPlanFlow] Attempt ${retries} failed: ${errorMessage}`);
        if (retries >= MAX_RETRIES || !errorMessage.includes('503') && !errorMessage.includes('overloaded')) {
          // If max retries reached, or error is not a 503/overload, provide fallback
          console.error(`[suggestWorkoutWhenNoPlanFlow] Max retries reached or non-retryable error. Returning fallback. Last error: ${errorMessage}`);
          return {
            workoutSuggestion: `Could not generate a specific workout suggestion at this time. Based on your preferences for ${input.workoutPreferences} and ${input.availableTime} available, consider a moderate intensity activity. If you enjoy running, a 20-30 minute easy jog could be suitable.`,
          };
        }
        // Wait before retrying for 503/overload errors
        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY_MS));
      }
    }
    // This part should ideally not be reached if the loop logic is correct,
    // but as a final fallback:
    console.error("[suggestWorkoutWhenNoPlanFlow] Exhausted retries without returning a value. This indicates an issue in the retry logic.");
    return {
      workoutSuggestion: "We're having trouble generating a workout suggestion right now. Please try again later or choose a general activity you enjoy.",
    };
  }
);

