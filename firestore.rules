
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership based on a given userId field
    function isOwner(docUserId) {
      return request.auth != null && request.auth.uid == docUserId;
    }

    // Helper function to check if the authenticated user matches the path userId
    function isUserItself(pathUserId) {
      return request.auth != null && request.auth.uid == pathUserId;
    }

    // Users collection
    match /users/{userId} {
      // Allow users to read and update their own profile
      allow read, update: if isUserItself(userId);
      // Allow users to create their own profile, ensuring the document ID in data matches their auth UID
      allow create: if request.auth != null && request.resource.data.id == request.auth.uid;
    }

    // TrainingPlans collection
    match /trainingPlans/{planId} {
      // Allow users to read their own training plans
      allow read: if resource.data.userId != null && isOwner(resource.data.userId);
      // Allow authenticated users to create a training plan, ensuring they set themselves as the userId
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow owners to update their training plan, but they cannot change the userId field
      allow update: if resource.data.userId != null && isOwner(resource.data.userId) &&
                      request.resource.data.userId == resource.data.userId;
      // Allow owners to delete their own training plans
      allow delete: if resource.data.userId != null && isOwner(resource.data.userId);
    }

    // DashboardCache collection
    match /dashboardCache/{cacheId} {
      // cacheId is expected to be the userId
      // Allow users to read, create, update, delete their own cache
      allow read, write: if isUserItself(cacheId); // Combines create, update, delete
    }

    // WeatherCache collection
    // Typically less restrictive or managed by backend functions.
    // For simplicity, allowing any authenticated user to read.
    // Writes might be restricted to backend Cloud Functions or specific admin roles.
    match /weatherCache/{weatherCacheId} {
      allow read: if request.auth != null;
      // allow write: if <your_admin_or_backend_logic>; // Example placeholder for write rule
    }
  }
}
